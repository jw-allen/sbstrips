  
  [1X10 [33X[0;0YUtilities[133X[101X
  
  [33X[0;0YIn  this chapter, we document some additional functionalities that have been
  implemented  in  [5XSBStrips[105X  but which, really, can stand independently of it.
  Others   may   find  these  useful  without  caring  about  SB  algebras  or
  what-have-you. Among these, we include minor extensions of functionality for
  [5XQPA[105X[133X
  
  
  [1X10.1 [33X[0;0YCollected lists[133X[101X
  
  [33X[0;0YSometimes  it  is  important  to  know  [13Xwhere[113X  in a list an element appears.
  Sometimes,  all  that  matters is [13Xhow often[113X it does. (In mathematical terms,
  these  two  ideas  respectively correspond to a [13Xsequence[113X of elements and the
  multiset  of  values  it  takes.)  One  can  of course move from knowing the
  positions of elements to just knowing their frequency. This is a strict loss
  of information, but usually not a loss of very important information.[133X
  
  [33X[0;0Y[5XGAP[105X  implements  this  functionality using [2XCollected[102X ([14XReference: Collected[114X).
  Calls  to  this  operation  yield  lists  that  store  information in a more
  economical,  if  slightly less informative, fashion, of which [5XSBStrips[105X makes
  great  use.  Using  [10XCollected[110X on a list [10Xlist[110X returns another list, detailing
  the  different elements appearing in [10Xlist[110X and their [13Xmultiplicity[113X (ie, number
  of instances) in [10Xlist[110X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xlist := [ "s", "b", "s", "t", "r", "i", "p", "s" ];[127X[104X
    [4X[28X[ "s", "b", "s", "t", "r", "i", "p", "s" ][128X[104X
    [4X[25Xgap>[125X [27Xclist := Collected( list );[127X[104X
    [4X[28X[ [ "b", 1 ], [ "i", 1 ], [ "p", 1 ], [ "r", 1 ], [ "s", 3 ],[128X[104X
    [4X[28X  [ "t", 1 ] ][128X[104X
    [4X[25Xgap>[125X [27Xelt := clist[5];[127X[104X
    [4X[28X[ "s", 3 ][128X[104X
  [4X[32X[104X
  
  [33X[0;0YIn  the  above  example,  the  entry  [10X[  "s", 3 ][110X in [10Xclist[110X tells us that the
  element  [10X"s"[110X appears [10X3[110X times in [10Xlist[110X. In other words, [10X"s[110X has [13Xmultitplicity[113X [10X3[110X
  (in [10Xlist[110X).[133X
  
  [33X[0;0YIn  this  documentation,  we  will use the terms [13Xelements[113X and [13Xmultiplicities[113X
  respectively  to mean the first and second entries of entries of a collected
  list.  So,  in  the  above example, the elements of [10Xclist[110X are [10X"b"[110X, [10X"i"[110X, [10X"p"[110X,
  [10X"r"[110X,  [10X"s"[110X  and [10X"t"[110X and their respective multiplicities are [10X1[110X, [10X1[110X, [10X1[110X, [10X1[110X, [10X3[110X and
  [10X1[110X.[133X
  
  [33X[0;0YWhat  characterises a collected list is that all of its entries are lists of
  length  [22X2[122X,  the  second  being a positive integer. Elements may be repeated.
  This doesn't happen from simple uses of [10XCollected[110X, of course, but can result
  from   combining  several  collected  lists,  for  instance  with  [2XCollected[102X
  ([14XReference: Collected[114X) or [2XAppend[102X ([14XReference: Append[114X).[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xhello := Collected( [ "h", "e", "l", "l", "o" ] );[127X[104X
    [4X[28X[ [ "e", 1 ], [ "h", 1 ], [ "l", 2 ], [ "o", 1 ] ][128X[104X
    [4X[25Xgap>[125X [27Xworld := Collected( [ "w", "o", "r", "l", "d" ] );[127X[104X
    [4X[28X[ [ "d", 1 ], [ "l", 1 ], [ "o", 1 ], [ "r", 1 ], [ "w", 1 ] ][128X[104X
    [4X[25Xgap>[125X [27Xhello_world := Concatenation( hello, world );[127X[104X
    [4X[28X[ [ "e", 1 ], [ "h", 1 ], [ "l", 2 ], [ "o", 1 ], [ "d", 1 ],[128X[104X
    [4X[28X  [ "l", 1 ], [ "o", 1 ], [ "r", 1 ], [ "w", 1 ] ][128X[104X
    [4X[25Xgap>[125X [27XIsCollectedList( hello_world );[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [33X[0;0YHere,  the element [10X"l"[110X appears twice in [10Xhello_world[110X, first with multiplicity
  [10X2[110X  and  then  again  with multiplicity [10X1[110X. The element [10X"o"[110X also appears twice
  with multiplicity [10X1[110X each time. Despite this repetition, [10Xhello_world[110X is still
  a collected list. It may be "tidied up" using [2XRecollected[102X ([14X10.1-4[114X).[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XRecollected( hello_world );[127X[104X
    [4X[28X[ [ "e", 1 ], [ "h", 1 ], [ "l", 3 ], [ "o", 2 ], [ "d", 1 ],[128X[104X
    [4X[28X  [ "r", 1 ], [ "w", 1 ] ][128X[104X
  [4X[32X[104X
  
  [1X10.1-1 IsCollectedList[101X
  
  [33X[1;0Y[29X[2XIsCollectedList[102X( [3Xlist[103X ) [32X property[133X
  
  [33X[0;0YArgument: [3Xlist[103X, a list[133X
  
  [6XReturns:[106X  [33X[0;10Y[9Xtrue[109X  if  all  entries  of  [3Xlist[103X  are  lists  of length [22X2[122X having a
            positive integer in their second entry, and [9Xfalse[109X otherwise.[133X
  
  [33X[0;0YThis  property  will  return  [9Xtrue[109X  on lists returned from the [5XGAP[105X operation
  [2XCollected[102X  ([14XReference:  Collected[114X), as well as on combinations of such lists
  using   [2XConcatenation[102X   ([14XReference:   concatenation   of  lists[114X)  or  [2XAppend[102X
  ([14XReference: Append[114X). This is the principal intended use of this property.[133X
  
  [33X[0;0YWhen  this  document  refers  to a [13Xcollected list[113X, it means a list for which
  [2XIsCollectedList[102X returns [9Xtrue[109X.[133X
  
  [1X10.1-2 IsCollectedDuplicateFreeList[101X
  
  [33X[1;0Y[29X[2XIsCollectedDuplicateFreeList[102X( [3Xclist[103X ) [32X property[133X
  
  [33X[0;0YArgument: [3Xclist[103X[133X
  
  [6XReturns:[106X  [33X[0;10Y[9Xtrue[109X if [3Xclist[103X is a collected list with no repeated elements[133X
  
  [33X[0;0YIn  particular,  if  [3Xclist[103X  was  created  by  applying [2XCollected[102X ([14XReference:
  Collected[114X)  to  a  duplicate-free  list (see [2XIsDuplicateFreeList[102X ([14XReference:
  IsDuplicateFreeList[114X)),  then  this  property  will  return [9Xtrue[109X. This is the
  principal intended use of this property.[133X
  
  [1X10.1-3 IsCollectedHomogeneousList[101X
  
  [33X[1;0Y[29X[2XIsCollectedHomogeneousList[102X( [3Xclist[103X ) [32X property[133X
  
  [33X[0;0YArgument: [3Xclist[103X, a collected list[133X
  
  [6XReturns:[106X  [33X[0;10Y[9Xtrue[109X  if  the elements of [10Xclist[110X form a homogeneous list, and [9Xfalse[109X
            otherwise[133X
  
  [33X[0;0YIf  [10Xobj[110X  is  the  result  of  applying [2XCollected[102X ([14XReference: Collected[114X) to a
  homogeneous  list,  then  this  property returns [9Xtrue[109X. This is the principal
  intended use of this property.[133X
  
  [1X10.1-4 Recollected[101X
  
  [33X[1;0Y[29X[2XRecollected[102X( [3Xclist[103X ) [32X operation[133X
  
  [33X[0;0YArgument: [3Xclist[103X, a collected list[133X
  
  [6XReturns:[106X  [33X[0;10Ya   collected  list,  removing  repeated  elements  in  [3Xclist[103X  and
            totalling their multiplicities.[133X
  
  [33X[0;0YIf  [3Xclist[103X contains entries with matching first entries, say [10X[ obj, n ][110X and [10X[
  obj,  m  ][110X,  then it will combine them into a single entry [10X[ obj, n+m ][110X with
  totalised   multiplicity.   This   can   be   necessary  when  dealing  with
  concatenations   ([2XConcatenation[102X  ([14XReference:  concatenation  of  lists[114X))  of
  collected lists.[133X
  
  [1X10.1-5 Uncollected[101X
  
  [33X[1;0Y[29X[2XUncollected[102X( [3Xclist[103X ) [32X operation[133X
  
  [33X[0;0YArgument: [3Xclist[103X, a collected list[133X
  
  [6XReturns:[106X  [33X[0;10Ya  (flat)  list,  where  each  element  in  [3Xclist[103X appears with the
            appropriate multiplicity[133X
  
  
  [1X10.2 [33X[0;0YMiscellaneous utilities for [5XQPA[105X[101X[1X[133X[101X
  
  [33X[0;0YWhat follows are minor additional utilities for [5XQPA[105X.[133X
  
  [1X10.2-1 String[101X
  
  [33X[1;0Y[29X[2XString[102X( [3Xpath[103X ) [32X method[133X
  
  [33X[0;0YArgument:  [3Xpath[103X,  a  path of length at least [22X2[122X in a quiver (see [2XIsPath[102X ([14XQPA:
  IsPath[114X) and [2XLengthOfPath[102X ([14XQPA: LengthOfPath[114X) for details)[133X
  
  [6XReturns:[106X  [33X[0;10Ya string describing [3Xpath[103X[133X
  
  [33X[0;0YMethods for [2XString[102X ([14XReference: String[114X) already exist for vertices and arrows
  of  a  quiver; that is to say, paths of length [22X0[122X or [22X1[122X. [5XQPA[105X forgets these for
  longer paths: at present, only the default answer [10X"<object>"[110X is returned.[133X
  
  [33X[0;0YA  path  in [5XQPA[105X is products of arrows. Accordingly, we write its string as a
  [10X*[110X-separated  sequences  of  its constituent arrows. This is in-line with how
  paths are printed using [2XViewObj[102X ([14XReference: ViewObj[114X).[133X
  
  [1X10.2-2 ArrowsOfQuiverAlgebra[101X
  
  [33X[1;0Y[29X[2XArrowsOfQuiverAlgebra[102X( [3Xalg[103X ) [32X operation[133X
  
  [33X[0;0YArgument: [3Xalg[103X, a quiver algebra (see [2XIsQuiverAlgebra[102X ([14XQPA: IsQuiverAlgebra[114X))[133X
  
  [6XReturns:[106X  [33X[0;10Ythe  residues  of the arrows in the defining quiver of [3Xalg[103X, listed
            together[133X
  
  [1X10.2-3 VerticesOfQuiverAlgebra[101X
  
  [33X[1;0Y[29X[2XVerticesOfQuiverAlgebra[102X( [3Xalg[103X ) [32X operation[133X
  
  [33X[0;0YArgument: [3Xalg[103X, a quiver algebra (see [2XIsQuiverAlgebra[102X ([14XQPA: IsQuiverAlgebra[114X))[133X
  
  [6XReturns:[106X  [33X[0;10Ythe residues of the vertices in the defining quiver of [3Xalg[103X, listed
            together[133X
  
